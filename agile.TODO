rails g resource IndeedResult score:float job_total_1:integer job_total_2:integer job_listing_1:text job_listing_2:text job_raw_1:text job_raw_2:text search:references:index


Sprint 1: Create basic search form and Database saving:
 ✔ Add New Search under user menu and only allow logged in user to use it @done (15-03-29 13:34)
 ✔ Input form @done (15-03-29 13:35)
   ✔ job 1 @done (15-03-29 13:35)
   ✔ job 2 @done (15-03-29 13:35)
   ✔ location @done (15-03-29 13:35)
 ✔ Save form submit @done (15-03-29 15:00)
   ✔ Search table contains everything but location @done (15-04-07 15:43)
   ✔ Parse api results into savable format @done (15-04-07 15:43)
     ✔ Basic api to start (indeed only) @done (15-04-07 15:43)
   ✔ Result Table contains the location, and api results @done (15-04-07 15:43)
     ✔ Location @done (15-04-07 15:43)
     ✔ totalJobs @done (15-04-07 15:43)
     ✔ Top 5 jobs for each search @done (15-04-07 15:43)

Sprint 2a: Add unit testing and Refactor:
  ✔ Search controller @done (15-04-15 18:55)
  ✔ A user has many searches @done (15-04-17 16:37)
  ✔ A search has one indeed_result @done (15-04-22 07:55)
  ✔ A search has one meetup_result @done (15-04-22 07:55)
    ✔ id @done (15-04-22 07:55)
    ✔ job1 @done (15-04-22 07:55)
    ✔ job2 @done (15-04-22 07:55)
    ✔ location @done (15-04-22 07:55)
    ✔ user_id @done (15-04-22 07:55)
  ✔ An indeed_result belongs to a search @done (15-04-22 07:55)
    ✔ api_type @done (15-04-22 07:55)
    ✔ raw data @done (15-04-22 07:55)

Sprint 2: Save api results to table and display:
  ✔ Save api response to results table and associate to a search @done (15-04-08 09:43)
  ✔ Index page with all searches from a single user @done (15-04-08 09:43)
    ✔ Compare checkbox for up to three results @done (15-04-22 14:30)
  ✔ Score Metric? @done (15-04-22 07:55)
    ✔ Point Totals @done (15-04-22 07:55)
      ✔ 1 (less than 3 jobs) @done (15-04-22 07:55)
      ✔ 5 (10 jobs) @done (15-04-22 07:55)
      ✔ 10 (more than 40 jobs) @done (15-04-22 07:55)
    ✔ If job1 has greatly less than job2 then decrease points of job2 by certain percent @done (15-04-22 07:55)
      ✔ job1 = 4 jobs (2) @done (15-04-22 07:55)
      ✔ job2 = 167 jobs (10) @done (15-04-22 07:55)
      ✔ 12 points! sounds pretty good @done (15-04-22 07:55)
      ✔ D in scripty font animation @done (15-04-22 07:55)
  ✔ Show single search results @done (15-04-15 18:33)
    ✔ Raw data basically @done (15-04-15 18:33)

Sprint 3a: Compatibilty Comparison Page:
  ✔ Three city comparison @done (15-04-22 14:30)
    ✔ Three columns side-by-side @done (15-04-22 14:30)
    ✔ Major score in large print @done (15-04-22 14:30)
    ✔ Details below <hr /> in soft gray @done (15-04-22 14:30)


Sprint 4: Show Search results and compat page:
 ✔ Job Listing formatted @done (15-05-03 09:40)
 ✔ Save formatted listing @done (15-05-03 09:40)

---- ✄ -----------------------

Sprint 5: Add integration and unit testing suite:
 ✔ Integration tests @done (15-05-12 21:54)
   ✔ Indeed Service Test @done (15-05-12 21:54)
     ✔ Should not have valid format or should have error code @done (15-05-12 21:54)
   ✔ Create new search with indeed results @done (15-05-12 21:54)
   ✔ Create New search with other api results (boilerplate ^^^) @done (15-05-12 21:54)
 ✔ Test controllers @done (15-05-12 21:54)
   ✔ Pages @done (15-05-12 21:54)
 ✔ Test models @done (15-05-03 11:16)
   ✔ Search @done (15-05-04 13:33)
   ✔ Indeed Result @done (15-05-04 13:33)
 ✔ Remove indeed controller & views @done (15-05-04 13:31)

Sprint 6: Add Another API:
  ☐ Add fields to form (Check boxes for specific api enabling)
    ☐ Meetup interests
    ☐ Eventbright interests
    ☐ GreatSchool (yes / no)
    ☐ Facebook (yes / no)
    ☐ Trulia Stats (http://developer.trulia.com/docs/read/TruliaStats/getNeighborhoodStats)
    ☐ Yelp interests
  ☐ Create new association and migration
    ☐ rails g resource [api-name] fields
    ☐ rake db:migrate
  ☐ Add api key to secrets
  ☐ Parse and Format response data
  ☐ Save data on search
  ☐ Calculate a score for the city
  ☐ Show score in column on index page
    ☐ Job1 | Job2 | Overall score | Indeed Score | Other API Score

Sprint 7: Search listing cleanup and Sass:
 ☐ Sort Table by score column
 ☐ Flickr api to grab an image from the city
 ☐ Prevent clicking more than 3 (js)
 ☐ Choose typefaces to use
 ☐ Choose Color Scheme
 ☐ Create styleguide with sass

Sprint 8: Create a queue system for free api services:
  ☐ Create table to store maximum limits per service name
    ☐ service_name, limit, current
  ☐ Queue new api requests
    ☐ Potentially just add a flag column into Search to say if the api has been parsed yet for that id
  ☐ Check limits for api before running
  ☐ Check user limit per day for requests before running
  ☐ Create Cron to run requests Daily
    ☐ Run requests in queue
    ☐ Check new db table for maxlimit information on api's and current usage
    ☐ Check user db table for how many request today?
  ☐ Secondary cron to reset daily user requests and api daily requests to 0

